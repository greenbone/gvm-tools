# -*- coding: utf-8 -*-
# Description:
# Script for gvm-pyshell
#
# Authors:
# Joshua Schwartz <joshua.schwartz@greenbone.net>
#
# Copyright:
# Copyright (C) 2018 Greenbone Networks GmbH
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import time

len_args = len(args.script) - 1
if len_args is not 2:
    message = """
    This script will update target hosts information for a desired task.
    Two parameters after the script name are required.

    1. <hosts_file> --.csv file containing desired target hosts
    2. <task_uuid>  --uuid of task to be modified

    Example for starting up the routine:
        $ gvm-pyshell ssh --hostname=hostname --gmp-username=name \
--gmp-password=pass scripts/update-task-target-hosts.gmp hosts_file.csv \
"303fa0a6-aa9b-43c4-bac0-66ae0b2d1698"

    """
    print(message)
    quit()

hosts_file = args.script[1]
task_id = args.script[2]


def error_and_exit(msg):
    sys.stderr.write("Error: {}\n".format(msg))
    sys.exit(1)


def load_host_file(filename):
    host_list = []

    try:
        f = open(filename)
        for line in f:
            host = line.split(",")[0]
            host = host.strip()
            if len(host) == 0:
                continue
            host_list.append(host)

    except IOError as e:
        error_and_exit("Failed to read host_file: {} (exit)".format(str(e)))

    if len(host_list) == 0:
        error_and_exit("Host file is empty (exit)")

    hosts_string = ', '.join(map(str, host_list))

    return hosts_string


def copy_send_target(old_target_id):
    hosts_string = load_host_file(hosts_file)
    keywords = {
                'make_unique': True,
                'hosts': hosts_string
                }

    keywords['comment'] = 'This target was automatically modified: {}'\
                          .format(time.strftime("%Y/%m/%d-%H:%M:%S"))

    old_target = gmp.get_targets(target_id=old_target_id)[0]

    objekts = ['reverse_lookup_only', 'reverse_lookup_unify', 'name']
    for objekt in objekts:
        var = old_target.xpath('{}/text()'.format(objekt))[0]
        if var is '0':
            var = ''
        keywords['{}'.format(objekt)] = var

    keywords['port_list'] = {'id': old_target.xpath('port_list/@id')[0]}

    new_target_id = gmp.create_target(**keywords).xpath('@id')[0]

    print('\n  New target created!\n')
    print('Target_id:   {}'.format(new_target_id))
    print('Target_name: {}\n'.format(keywords['name']))

    return new_target_id


def create_target_hosts(task_id, old_target_id):
    new_target_id = copy_send_target(old_target_id)

    gmp.modify_task(
                    task_id=task_id,
                    target_id=new_target_id
                    )

    print('  Task successfully modified!\n')


def main(hosts_file, task_id):
    task = gmp.get_tasks(task_id=task_id)[1]
    old_target_id = task.xpath('target/@id')[0]
    create_target_hosts(task_id, old_target_id)
    try:
        gmp.delete_target(target_id=old_target_id)

    except GMPError as e:
        pass

main(hosts_file, task_id)
sys.exit(0)
