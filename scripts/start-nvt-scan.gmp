# -*- coding: utf-8 -*-
# Description:
# Script for gvm-pyshell
#
# Authors:
# Raphael Grewe <raphael.grewe@greenbone.net>
#
# Copyright:
# Copyright (C) 2017 Greenbone Networks GmbH
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

len_args = len(args.script) - 1
if len_args is not 2:
    message = """
    This script creates a new task with specific host and nvt!
    It needs two parameters after the script name.
    First one is the oid of the nvt and the second one is the
    chosen scan target.

    Example:
        $ gvm-pyshell socket scripts/startNVTScan.gmp \
1.3.6.1.4.1.25623.1.0.106223 localhost
    """
    print(message)
    quit()

nvt_oid = args.script[1]
hosts = args.script[2]

# Choose from existing config, which to copy or create new config
res = gmp.get_configs()

config_ids = res.xpath('config/@id')
configs_names = res.xpath('config/name/text()')

for i, conf in enumerate(res.xpath('config')):
    id = conf.xpath('@id')[0]
    name = conf.xpath('name/text()')[0]
    print('\n({0}) {1}: ({2})'.format(i, name, id))

while True:
    chosen_config = input(
        '\nChoose your config or create new one[0-{len} | n]: '
        .format(len=len(config_ids) - 1))
    if chosen_config is 'n':
        chosen_copy_config = int(
            input('Which config to copy? [0-{len}]: '
                  .format(len=len(config_ids) - 1)))
        config_name = input('Enter new Name for config: ')
        copy_id = config_ids[chosen_copy_config]
        res = gmp.create_config(copy_id, config_name)
        config_id = res.xpath('@id')[0]

        # Modify the config with an nvt oid
        if len(nvt_oid) is 0:
            nvt_oid = input('NVT OID: ')

        nvt = gmp.get_nvts(nvt_oid=nvt_oid, details=1)
        family = nvt.xpath('nvt/family/text()')[0]

        gmp.modify_config('nvt_selection', config_id=config_id,
                          nvt_oid=nvt_oid, family=family)

        # This nvts must be present to work
        family = 'Port scanners'
        nvts = ['1.3.6.1.4.1.25623.1.0.14259', '1.3.6.1.4.1.25623.1.0.100315']
        gmp.modify_config('nvt_selection', config_id=config_id,
                          nvt_oid=nvts, family=family)
        break

    if 0 <= int(chosen_config) <= len(config_ids) - 1:
        config_id = config_ids[int(chosen_config)]
        break


# create a new target or use an existing
targets = gmp.get_targets()
target_ids = targets.xpath('target/@id')

for i, target in enumerate(targets.xpath('target')):
    name = target.xpath('name/text()')[0]
    print('\n({0}) {1}'.format(i, name))

while True:
    if target_ids:
        chosen_target = input(
            '\nChoose your target or create new one[0-{len} | n]: '
            .format(len=len(target_ids) - 1))
    else:
        chosen_target = 'n'

    if chosen_target is 'n':
        if len(hosts) is 0:
            hosts = input('Target hosts: ')
        name = input('Name of target: ')

        res = gmp.create_target(name, True, hosts=hosts)
        target_id = res.xpath('@id')[0]
        break

    if 0 <= int(chosen_target) <= len(target_ids) - 1:
        target_id = target_ids[int(chosen_target)]
        break


# Create the task
res = gmp.get_scanners()
scanner_ids = res.xpath('scanner/@id')

for i, scanner in enumerate(res.xpath('scanner')):
    id = scanner.xpath('@id')[0]
    name = scanner.xpath('name/text()')[0]
    # configs[id] = name
    print("\n({0})\n{1}: ({2})".format(i, name, id))

while True:
    chosen_scanner = int(
        input('\nChoose your scanner [0-{len}]: '
              .format(len=len(scanner_ids) - 1)))
    if 0 <= chosen_scanner <= len(scanner_ids) - 1:
        break

scanner_id = scanner_ids[chosen_scanner]

task_name = input('Task name: ')
task_comment = input('Task comment: ')

res = gmp.create_task(task_name, config_id, target_id,
                      scanner_id, task_comment)


# Start the task
task_id = res.xpath('@id')[0]
gmp.start_task(task_id)
print('Task started')
